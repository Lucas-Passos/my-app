import React, { useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  Image,
  Button,
  Alert,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';

const App = () => {
  const [view, setView] = useState('login'); // 'login', 'register', 'reset-password'
  
  // Form states for login
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  
  // Form states for registration
  const [registerCpf, setRegisterCpf] = useState('');
  const [registerName, setRegisterName] = useState('');
  const [registerEmail, setRegisterEmail] = useState('');
  const [registerPassword, setRegisterPassword] = useState('');

  // Form states for password reset
  const [resetPassword, setResetPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  // Logic to handle button clicks and form submissions
  const handleLogin = () => {
    Alert.alert('Sucesso!', 'Login realizado com sucesso!');
  };

  const handleRegisterSubmit = () => {
    if (registerCpf && registerName && registerEmail && registerPassword) {
      Alert.alert('Sucesso!', 'Usuário registrado com sucesso!');
      setTimeout(() => setView('login'), 1500);
    }
  };

  const handleResetPasswordSubmit = () => {
    if (resetPassword !== confirmPassword) {
      Alert.alert('Erro', 'Senhas não são iguais');
      setResetPassword('');
      setConfirmPassword('');
      return;
    }
    Alert.alert('Sucesso!', 'Senha redefinida com sucesso!');
    setTimeout(() => setView('login'), 1500);
  };

  // Helper functions to check form validity
  const isRegisterFormValid = registerCpf.trim() && registerName.trim() && registerEmail.trim() && registerPassword.trim();
  const isLoginFormValid = loginEmail.trim() && loginPassword.trim();
  const isResetFormValid = resetPassword.trim() && confirmPassword.trim();
  
  // Conditionally render the correct view based on the 'view' state
  const renderView = () => {
    switch (view) {
      case 'login':
        return (
          <View style={styles.content}>
            <Image
              source={{ uri: 'https://placehold.co/200x200/cccccc/ffffff?text=LOGO' }}
              style={styles.logo}
              resizeMode="contain"
            />
            <Text style={styles.label}>E-mail</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite seu e-mail"
              keyboardType="email-address"
              value={loginEmail}
              onChangeText={setLoginEmail}
              autoCapitalize="none"
            />
            <Text style={styles.label}>Senha</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite sua senha"
              secureTextEntry={true}
              value={loginPassword}
              onChangeText={setLoginPassword}
            />
            <Button
              title="ENTRAR"
              onPress={handleLogin}
              disabled={!isLoginFormValid}
              color="#1E90FF"
            />
            <View style={styles.linkContainer}>
              <TouchableOpacity onPress={() => setView('register')}>
                <Text style={styles.link}>Registrar-se</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={() => setView('reset-password')}>
                <Text style={styles.link}>Redefinir a Senha</Text>
              </TouchableOpacity>
            </View>
          </View>
        );
      case 'register':
        return (
          <View style={styles.content}>
            <Text style={styles.title}>Cadastro de Usuário</Text>
            <Text style={styles.label}>CPF</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite seu CPF"
              value={registerCpf}
              onChangeText={setRegisterCpf}
            />
            <Text style={styles.label}>Nome</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite seu nome"
              value={registerName}
              onChangeText={setRegisterName}
            />
            <Text style={styles.label}>E-mail</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite seu e-mail"
              keyboardType="email-address"
              value={registerEmail}
              onChangeText={setRegisterEmail}
              autoCapitalize="none"
            />
            <Text style={styles.label}>Senha</Text>
            <TextInput
              style={styles.input}
              placeholder="Crie uma senha"
              secureTextEntry={true}
              value={registerPassword}
              onChangeText={setRegisterPassword}
            />
            <Button
              title="Salvar"
              onPress={handleRegisterSubmit}
              disabled={!isRegisterFormValid}
              color="#228B22"
            />
            <TouchableOpacity style={styles.backButton} onPress={() => setView('login')}>
              <Text style={styles.backButtonText}>Voltar para Login</Text>
            </TouchableOpacity>
          </View>
        );
      case 'reset-password':
        return (
          <View style={styles.content}>
            <Text style={styles.title}>Redefinir Senha</Text>
            <Text style={styles.label}>Nova Senha</Text>
            <TextInput
              style={styles.input}
              placeholder="Digite a nova senha"
              secureTextEntry={true}
              value={resetPassword}
              onChangeText={setResetPassword}
            />
            <Text style={styles.label}>Confirmar Senha</Text>
            <TextInput
              style={styles.input}
              placeholder="Confirme a nova senha"
              secureTextEntry={true}
              value={confirmPassword}
              onChangeText={setConfirmPassword}
            />
            <Button
              title="Salvar"
              onPress={handleResetPasswordSubmit}
              disabled={!isResetFormValid}
              color="#FF4500"
            />
            <TouchableOpacity style={styles.backButton} onPress={() => setView('login')}>
              <Text style={styles.backButtonText}>Voltar para Login</Text>
            </TouchableOpacity>
          </View>
        );
      default:
        return null;
    }
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      {renderView()}
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f4f7',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  content: {
    width: '100%',
    maxWidth: 400,
    backgroundColor: '#ffffff',
    padding: 24,
    borderRadius: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  logo: {
    width: 120,
    height: 120,
    alignSelf: 'center',
    marginBottom: 24,
    borderRadius: 60,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 10,
    paddingHorizontal: 16,
    marginBottom: 16,
    backgroundColor: '#f9f9f9',
  },
  linkContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  link: {
    color: '#1E90FF',
    textDecorationLine: 'underline',
  },
  backButton: {
    marginTop: 16,
    borderColor: '#1E90FF',
    borderWidth: 1,
    borderRadius: 10,
    paddingVertical: 12,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#1E90FF',
    fontWeight: 'bold',
  },
});

export default App;
